[{"content":"Update: Feb 4, 2025\n在 AI 世界有太多太多名詞，對於小白來說特別容易感到沒有方向。不論是經典的機器學習或是深度學習，當提到訓練方法時，大致上可以分成三種：\n監督式學習 Supervised Learning 非監督式學習 Unsupervised Learning 半監督式學習 Semi-supervised Learning 你可能會好奇：「為什麼叫監督式學習？難道我要在旁邊盯著模型學習嗎？」其實，「監督」的意思是指提供標註資料，而「非監督」則是讓模型自行尋找模式，今天這篇文章就會幫你釐清以上的問題。\n監督式學習 Supervised Learning 監督式學習透過大量的 標註資料（Labeled Data） 訓練模型，讓模型學會從「已知答案」中找出規則，並應用到新的資料上。\n舉例來說，現在你想要透過機器學習模型辨是貓或是狗，因此你收集了大量貓和狗的照片作為訓練資料，另外你還對照片加上註解，說明這張照片是貓還是狗，因此你的訓練資料即為「標註資料」。\n只要有足夠的標註資料，經過訓練的模型就能正確的回答你這張照片是貓或是狗。在這個例子中，模型的輸入是圖片的像素數據，而輸出則是一個標籤（貓或狗）。透過大量標註過的圖片，模型學習如何將新的圖片對應到正確的分類。\n其他應用？\n監督式學習除了用來進行分類（如貓狗識別），還能用於:\n房價預測 🏡 → AI 透過大量的「房屋特徵 + 成交價格」數據學習，能夠根據房屋的大小、地點和其他條件來預測新房屋的價格，幫助買賣雙方做出更好的決策。 病患康復時間預測 🏥 → AI 透過醫院收集的「病患狀況 + 康復時間」數據學習，當新病人來就診時，系統能夠根據病情預測大約需要多久才能康復，幫助醫生規劃治療方案。 小結\n監督式學習就像是在「有老師指導」的情況下學習。模型學會從已知的問題與答案中找出規則，然後用這些規則來預測新資料的結果。\n非監督式學習 Unsupervised Learning 非監督式學習使用 未標記的資料 來進行訓練，目標是讓模型自己找出數據中的規律，例如把相似的東西分成不同的類別。\n同樣以動物來舉例，現在你有許多動物的照片如下圖\n並且你希望找出這些動物可以分成幾類，於是將所有照片交給機器學習模型進行訓練。最後，模型告訴你可以分成貓、狗和魚三類，這就是一個非監督式學習經典的分群應用。\n其他應用？\n除了分群問題，非監督式學習還常見於：\n音樂與電影推薦 🎵🎬 → Spotify 或 Netflix 會分析你的喜好，找出跟你相似的人，然後推薦你可能喜歡的歌曲或電影。 垃圾郵件過濾 📧 → 電郵服務會分析郵件內容，判斷哪些郵件「看起來像垃圾信」，即使沒有標記，它也能學會分類。 社群媒體標籤 📷 → Instagram 可能會自動將你的照片分組，例如「食物」、「風景」、「自拍」，幫助你更方便整理相冊。 小結\n非監督式學習就像是「不認識新朋友，但試著找出他們的共同點」。它不需要事先標註的資料，而是透過分析數據，自己找出規則。\n半監督式學習 Semi-supervised Learning 半監督式學習介於監督與非監督學習之間，它使用少量的標註資料與大量未標註的資料來訓練模型。\n想像你擁有 10 萬張動物照片，但只有 5000 張是有標註的（貓或狗），這時你可以先用這些標註資料訓練一個基本模型，然後讓模型去學習未標註的資料，藉此提升分類準確率。這種方法在醫學影像分析（如腫瘤識別）與自然語言處理（如語音辨識）等領域特別有用，因為標註數據的取得成本通常很高。\n總結 類型 標註資料 應用範圍 監督式學習 需要大量標註資料 影像分類、語音辨識、數值預測 非監督式學習 不需要標註資料 分群、降維、異常偵測 半監督式學習 少量標註 + 大量未標註 自然語言處理、大型影像數據分析 若你的數據有大量標註資訊，監督式學習是最佳選擇；若沒有標註數據，但希望從數據中找出模式，則適合使用非監督式學習；如果標註數據有限，但仍希望利用其提升模型效能，那麼半監督式學習是一種折衷方案。\n參考資料 機器學習任務：監督學習/半監督學習/無監督學習\n監督式學習與非監督式學習之間有何差異？\n","permalink":"https://yylunxie.me/blogs/aws_aif_qanda/","summary":"\u003cp\u003e\u003cem\u003eUpdate: Feb 4, 2025\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e在 AI 世界有太多太多名詞，對於小白來說特別容易感到沒有方向。不論是經典的機器學習或是深度學習，當提到訓練方法時，大致上可以分成三種：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e監督式學習 Supervised Learning\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e非監督式學習 Unsupervised Learning\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e半監督式學習 Semi-supervised Learning\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e你可能會好奇：「為什麼叫監督式學習？難道我要在旁邊盯著模型學習嗎？」其實，「監督」的意思是指提供標註資料，而「非監督」則是讓模型自行尋找模式，今天這篇文章就會幫你釐清以上的問題。\u003c/p\u003e\n\u003ch1 id=\"監督式學習-supervised-learning\"\u003e監督式學習 Supervised Learning\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e監督式學習透過大量的 \u003cstrong\u003e標註資料（Labeled Data）\u003c/strong\u003e 訓練模型，讓模型學會從「已知答案」中找出規則，並應用到新的資料上。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e舉例來說，現在你想要透過機器學習模型辨是貓或是狗，因此你收集了大量貓和狗的照片作為訓練資料，另外你還對照片加上註解，說明這張照片是貓還是狗，因此你的訓練資料即為「標註資料」。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"training data\" loading=\"lazy\" src=\"/blogs/aws_aif_qanda/images/training_data.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e只要有足夠的標註資料，經過訓練的模型就能正確的回答你這張照片是貓或是狗。在這個例子中，模型的輸入是圖片的像素數據，而輸出則是一個標籤（貓或狗）。透過大量標註過的圖片，模型學習如何將新的圖片對應到正確的分類。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"process\" loading=\"lazy\" src=\"/blogs/aws_aif_qanda/images/process_super.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e其他應用？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e監督式學習除了用來進行分類（如貓狗識別），還能用於:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e房價預測 🏡 → AI 透過大量的「房屋特徵 + 成交價格」數據學習，能夠根據房屋的大小、地點和其他條件來預測新房屋的價格，幫助買賣雙方做出更好的決策。\u003c/li\u003e\n\u003cli\u003e病患康復時間預測 🏥 → AI 透過醫院收集的「病患狀況 + 康復時間」數據學習，當新病人來就診時，系統能夠根據病情預測大約需要多久才能康復，幫助醫生規劃治療方案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e小結\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e監督式學習就像是在「有老師指導」的情況下學習。模型學會從\u003cstrong\u003e已知的問題與答案\u003c/strong\u003e中找出規則，然後用這些規則來預測新資料的結果。\u003c/p\u003e\n\u003ch1 id=\"非監督式學習-unsupervised-learning\"\u003e非監督式學習 Unsupervised Learning\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e非監督式學習使用 \u003cstrong\u003e未標記的資料\u003c/strong\u003e 來進行訓練，目標是讓模型自己找出數據中的規律，例如把相似的東西分成不同的類別。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e同樣以動物來舉例，現在你有許多動物的照片如下圖\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"training data\" loading=\"lazy\" src=\"/blogs/aws_aif_qanda/images/unlabel_training.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e並且你希望找出這些動物可以分成幾類，於是將所有照片交給機器學習模型進行訓練。最後，模型告訴你可以分成貓、狗和魚三類，這就是一個非監督式學習經典的分群應用。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"result\" loading=\"lazy\" src=\"/blogs/aws_aif_qanda/images/group.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e其他應用？\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e除了分群問題，非監督式學習還常見於：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e音樂與電影推薦 🎵🎬 → Spotify 或 Netflix 會分析你的喜好，找出跟你相似的人，然後推薦你可能喜歡的歌曲或電影。\u003c/li\u003e\n\u003cli\u003e垃圾郵件過濾 📧 → 電郵服務會分析郵件內容，判斷哪些郵件「看起來像垃圾信」，即使沒有標記，它也能學會分類。\u003c/li\u003e\n\u003cli\u003e社群媒體標籤 📷 → Instagram 可能會自動將你的照片分組，例如「食物」、「風景」、「自拍」，幫助你更方便整理相冊。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e小結\u003c/strong\u003e\u003c/p\u003e","title":"機器學習常見問題：監督式學習和非監督式學習的差異？"},{"content":"這篇文是新系列「Hackerrank」的第 0 篇。會開始寫 Hackerrank 是因為朋友邀請我參加 2025 TSMC IT CareerHack 第六屆校園黑客松，參賽隊伍必須先完成初試才能進入下一階段。初試所使用的線上測驗系統就是 Hackerrank，因此在決定參賽後馬上開始練習 Hackerrank 的 1 Month Preparation Kit。\n在練習過程中，幸好我在上學期有修台大電機的演算法 (雖然成績慘不忍睹)，遇到很多題目都只是將教過的演算法實作出來，或是作為應用題呈現，因此解題時還算順暢。但仍然有許多題目是在當下想破頭也想不到解法的。希望透過這個系列將我在 Hackerrank 遇到的有趣題目記錄下來，加深自己印象的同時，也分享解題方法給同樣遇到困境的朋友們。\n若是之後的文章內容有誤或是想要討論的都歡迎與我聯繫，我們明天見！\n","permalink":"https://yylunxie.me/blogs/hackerrank_day0/","summary":"\u003cp\u003e這篇文是新系列「Hackerrank」的第 0 篇。會開始寫 Hackerrank 是因為朋友邀請我參加 \u003cstrong\u003e2025 TSMC IT CareerHack 第六屆校園黑客松\u003c/strong\u003e，參賽隊伍必須先完成初試才能進入下一階段。初試所使用的線上測驗系統就是 Hackerrank，因此在決定參賽後馬上開始練習 Hackerrank 的 1 Month Preparation Kit。\u003c/p\u003e\n\u003cp\u003e在練習過程中，幸好我在上學期有修台大電機的演算法 (雖然成績慘不忍睹)，遇到很多題目都只是將教過的演算法實作出來，或是作為應用題呈現，因此解題時還算順暢。但仍然有許多題目是在當下想破頭也想不到解法的。希望透過這個系列將我在 Hackerrank 遇到的有趣題目記錄下來，加深自己印象的同時，也分享解題方法給同樣遇到困境的朋友們。\u003c/p\u003e\n\u003cp\u003e若是之後的文章內容有誤或是想要討論的都歡迎與我聯繫，我們明天見！\u003c/p\u003e","title":"Hackerrank Day 0"},{"content":"Update: Feb 3, 2025\n在現在好像沒有自己的品牌是一件很稀有的事（ 比日本製的壓縮機還要稀少 ）。為了解決大家的煩惱，這是一篇帶你使用 Hugo + Github Pages 從零開始製作個人網站的教學！\n那我們就直接開始！\n1. 安裝 Hugo 本章節按照 Hugo 官方推薦步驟 進行安裝。\nMacOS\nStep 1. 使用 Homebrew 進行安裝，若還未安裝 Homebrew 請先自行安裝。進入 Terminal (終端機) 輸入以下指令：\nbrew install hugo Step 2. 輸入以下指令已檢查是否安裝成功：\nhugo --version 若有出現版本資訊即代表安裝成功。\n2. 套用主題 Step 1. 到 官方的主題網站 瀏覽並選擇自己喜歡的主題，本文以 PaperMod 為例。\nStep 2.\n先在本地創建一個新的 Hugo 網站。\nhugo new site MyFreshWebsite --format yaml # 將 MyFreshWebsite 替換為自己網站的名稱 --format yaml：將 hugo 的設定檔更改為 yaml 格式。 Step 3. 安裝 PaperMod 主題，這邊我按照最簡單的 官方的 Method 1（git clone）:\n安裝\n在終端機中進入自己創建的網站 MyFreshWebsite 的資料夾中輸入：\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 更新\n在終端機中進入自己創建的網站 MyFreshWebsite 的資料夾中輸入：\ncd themes/PaperMod git pull Step 4. 最後，在網站的設定檔 config.yaml 中將 Theme 指定為 PaperMod。\ntheme: [\u0026#34;PaperMod\u0026#34;] 現在，只要在 Terminal 輸入下列指令，並開啟 terminal 給的網址，就可以看到預設的網站了。\nhugo server -D -D：代表會顯示仍為 草稿 的文章。 3. PaperMod Config 設定 當一打開網站，你會發現長的跟 PaperMod 官網顯示的完全不一樣，你可能會覺得被騙了，但其實只要花點時間設定就沒問題了！\n關於 PaperMod 主題的設定，可以參考 官方的 wiki，所有 features 都是在 config.yaml 裡設定。\nHome page 如果要設定一般的 Home-Info Mode 網站主頁，範例設定如下：\n1 2 3 4 5 6 7 8 9 10 params: homeInfoParams: Title: Hi there wave Content: Can be Info, links, about... socialIcons: # optional - name: \u0026#34;\u0026lt;platform\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link\u0026gt;\u0026#34; - name: \u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link2\u0026gt;\u0026#34; 而如果想要將網站製作成 Portfolio ，也可以選擇更改為 Portfolio Mode\nparams: profileMode: enabled: true title: \u0026#34;\u0026lt;Title\u0026gt;\u0026#34; # optional default will be site title subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;image link\u0026gt;\u0026#34; # optional imageTitle: \u0026#34;\u0026lt;title of image as alt\u0026gt;\u0026#34; # optional imageWidth: 120 # custom size imageHeight: 120 # custom size buttons: - name: Archive url: \u0026#34;/archive\u0026#34; - name: Github url: \u0026#34;https://github.com/\u0026#34; socialIcons: # optional - name: \u0026#34;\u0026lt;platform\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link\u0026gt;\u0026#34; - name: \u0026#34;\u0026lt;platform 2\u0026gt;\u0026#34; url: \u0026#34;\u0026lt;link2\u0026gt;\u0026#34; Navigation Bar menu: main: - identifier: about name: About url: /about/ weight: 10 - identifier: blogs name: Blogs url: /blogs/ weight: 20 - identifier: search name: Search url: /search/ weight: 80 - name: Tags url: tags/ weight: 90 - identifier: archives name: Archives url: /archives/ weight: 99 Variable Description identifier 在 content 中資料夾或是需要的功能名稱 name 在 navigation bar 所顯示的名稱 url 該分頁在網址列的代表名稱 weight 在 navigation bar 顯示的前後順序，數字越小越前面 Archive Layout 在 content 資料夾建立一個 archives.md 檔案，並將下列內容加入：\n--- title: \u0026#34;Archive\u0026#34; layout: \u0026#34;archives\u0026#34; url: \u0026#34;/archives/\u0026#34; summary: archives --- Comment （待更新，敬請期待）\n官方範例 config.yml\n4. 建立文章 方法一、\n在 terminal 使用\nhugo new content content/\u0026lt;folder_name\u0026gt;/post.md 方法二、\n比較簡單也比較好管理，直接在 content 中要建立文章的資料夾中，建立存放該文章的資料夾，並在該資料夾建立 index.md（有點饒口）\n. ├── config.yml ├── content/ │ ├── archives.md │ └── posts/ │ └── first_post/ │ └── index.md ├── static/ └── themes/ └── PaperMod/ 5. GitHub Pages 部署 Step 1.\n建立一個 GitHub repository，repository 的名字可以隨意命名\nStep 2.\n將你的本地檔案 push 到剛剛創建的 GiuHub repository\nStep 3.\n進入你的 GitHub repository，選擇 Settings \u0026gt; Pages\n在畫面中間的 Build and Deployment 段落可以看到 Source，我們將 Source 設定為 GitHub Actions\nStep 4.\n在本地 repository 新增一個檔案\ntouch .github/workflows/hugo.yaml 並將下列內容複製貼上到你新增的.github/workflows/hugo.yaml，依照你的需求，有可能需要更改 branch name 和 hugo version .github/workflows/hugo.yaml # Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.137.1 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production TZ: America/Los_Angeles run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 最後，將變更提交並推送到 GitHub。\nStep 5.\n回到 GitHub repository 的 main menu，選擇 Actions 就會看到剛剛提交的 commit 變成一個橘色的 workflow，代表我們的網站正在交給 GitHub Pages 部署。\n等到變成綠色，代表網站部署成功！\n6. 自訂域名 Step 0.\n購買域名，可到例如 namecheap、GoDaddy 等網站購買。\nStep 1.\n進入網站的 GitHub repository，點選 Settings \u0026gt; Pages。\n並在 Custom Domain 中，設定購買的域名。接著，通常沒有在域名購買的網站上設定過，會顯示失敗。\nStep 2.\n到域名購買商的網站，幫你購買的域名設定 DNS， A record 以及 CNAME。\nA record\nhost 或 record name 是 @\n185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 CNAME\nhost 或 record name 是 www。\n\u0026lt;your github account name\u0026gt;.github.io 當設定完成後，過一下 GitHub Pages 的自訂域名就設定完成了！\n7. Google Analytics 追蹤網站流量 Step 1. 先到 https://analytics.google.com/ 照著步驟註冊帳號。 注意事項：\n帳號名稱可以隨意填 屬性名稱可以填 Github 帳號 Step 2. 完成後，選擇網站。網站網址填入先前設定好的網址，串流名稱則為辨識用，可以隨意取。\nStep 3. 取得 Google Analytics 提供的串流 ID。\n在 config.yaml 中新增下列指令，並將 G-XXXXXXXXXX 替換為你的串流 ID\ngoogleAnalytics: G-XXXXXXXXXX 這樣 Hugo 會自動在 head.html 內插入 GA 代碼！\n此外，params 內應該要有：\nparams: env: production 這樣可以確保只會在 production 環境追蹤。\nStep 4.\n確保 head.html 內有 GA 代碼，Hugo 應該會在 themes/PaperMod/layouts/partials/head.html 內自動插入：\n{{- template \u0026#34;_internal/google_analytics.html\u0026#34; . }} 通常在最後幾行，如果這行已經存在，你不需要手動插入 GA 代碼，它應該會自動運行。\nStep 5. 最後將其部署到 Github 即完成，範例如下：\nhugo --gc --minify git add . git commit -m \u0026#34;Enable Google Analytics\u0026#34; git push origin main 然後只要打開網站，並回到 Google Analytics 的網站，應該會出現以下畫面： 8. Google Search Console 讓大家可以搜尋到你 （待更新）\n9. Other Tips Collapsible Section Discussion\n創建 /layouts/shortcodes/details.html，並將下列加入其中：\n\u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;{{ (.Get 0) | markdownify }}\u0026lt;/summary\u0026gt; {{ .Inner | markdownify }} \u0026lt;/details\u0026gt; 接下來就可以在文章中使用 details ，如下：\n{details title=\u0026#34;Learn More\u0026#34; \u0026gt;} \u0026lt;----- 每個大括號外面都要再加一個大括號 Collapsed text {\u0026lt;/details \u0026gt;} 參考資料 Custom Doamin Hugo on GitHub Pages PaperMod How to build a portfolio website for data science | Hugo + Hostinger Hugo+PaperMod 双语博客搭建 Home-Info+Profile Mode [Hugo 自架站-5]安裝 Google Analytics 追蹤網頁的流量與成效 ","permalink":"https://yylunxie.me/blogs/hugo_tutorial/","summary":"\u003cp\u003e\u003cem\u003eUpdate: Feb 3, 2025\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e在現在好像沒有自己的品牌是一件很稀有的事（ 比日本製的壓縮機還要稀少 ）。為了解決大家的煩惱，這是一篇帶你使用 \u003cstrong\u003eHugo + Github Pages\u003c/strong\u003e 從零開始製作個人網站的教學！\u003c/p\u003e\n\u003cp\u003e那我們就直接開始！\u003c/p\u003e\n\u003ch1 id=\"1-安裝-hugo\"\u003e1. 安裝 Hugo\u003c/h1\u003e\n\u003cp\u003e本章節按照 \u003ca href=\"https://gohugo.io/installation/\"\u003eHugo 官方推薦步驟\u003c/a\u003e 進行安裝。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMacOS\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep 1.\u003c/strong\u003e \u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003e使用 Homebrew 進行安裝，若還未安裝 Homebrew 請先自行安裝。進入 Terminal (終端機) 輸入以下指令：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eStep 2.\u003c/strong\u003e \u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003e輸入以下指令已檢查是否安裝成功：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo --version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e若有出現版本資訊即代表安裝成功。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-套用主題\"\u003e2. 套用主題\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eStep 1.\u003c/strong\u003e \u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003e到 \u003ca href=\"https://themes.gohugo.io/\"\u003e官方的主題網站\u003c/a\u003e 瀏覽並選擇自己喜歡的主題，本文以 \u003cem\u003ePaperMod\u003c/em\u003e 為例。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eStep 2.\u003c/strong\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003e先在本地創建一個新的 Hugo 網站。\u003c/p\u003e","title":"Hugo + GitHub Pages 個人網站建置教學"},{"content":"2024.7.21 ~ 2024.8.5\n紀錄沿路風景\n","permalink":"https://yylunxie.me/gallery/japan/","summary":"\u003cp\u003e2024.7.21 ~ 2024.8.5\u003c/p\u003e\n\u003cp\u003e紀錄沿路風景\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-1.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-2.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-3.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-4.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-5.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-6.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-7.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-8.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-9.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-10.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-11.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-12.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-13.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-14.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-15.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-16.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-17.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-18.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-19.jpeg\"\u003e\n\u003cimg alt=\"Photo\" loading=\"lazy\" src=\"/gallery/japan/img/japan-20.jpeg\"\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e","title":"Japan"}]