<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Allen Hsieh</title>
    <link>https://yylunxie.me/tags/python/</link>
    <description>Recent content in Python on Allen Hsieh</description>
    <generator>Hugo -- 0.139.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Feb 2025 18:49:59 +0800</lastBuildDate>
    <atom:link href="https://yylunxie.me/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>什麼是 WSGI? 什麼又是 gunicorn?</title>
      <link>https://yylunxie.me/blogs/what-is-wsgi/</link>
      <pubDate>Thu, 13 Feb 2025 18:49:59 +0800</pubDate>
      <guid>https://yylunxie.me/blogs/what-is-wsgi/</guid>
      <description>&lt;h2 id=&#34;wsgi-介紹&#34;&gt;WSGI 介紹&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;WSGI (Python Web Server Gateway Interface)&lt;/strong&gt; 是一種 &lt;strong&gt;協議 protocol&lt;/strong&gt;，定義了 web server 和 python web application 或 framework 之間溝通的規範。&lt;/p&gt;
&lt;p&gt;它的目的是讓&lt;strong&gt;不同的 Python Web Framework (如 Flask、Django)&lt;/strong&gt; 與&lt;strong&gt;不同的 Web Server (如 Gunicorn、uWSGI)&lt;/strong&gt; 可以互相兼容。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;WSGI web server&lt;/strong&gt; 其實就是應用了 WSGI 的 Web server。&lt;/p&gt;
&lt;p&gt;📌 &lt;strong&gt;運作方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client 發送 HTTP request（Web browser → Web server）。&lt;/li&gt;
&lt;li&gt;Web server (e.g. gunicorn) 透過 WSGI 呼叫 Python applicatoin（e.g. Flask/Django）。&lt;/li&gt;
&lt;li&gt;Python applicatoin 處理請求，並回傳 HTTP response。&lt;/li&gt;
&lt;li&gt;Web server 再將 response 傳回給 web browser。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;gunicorn-介紹&#34;&gt;Gunicorn 介紹&lt;/h2&gt;
&lt;p&gt;Gunicorn (Green Unicorn) 是一種&lt;strong&gt;基於 unix 系統 的 WSGI HTTP server&lt;/strong&gt;，專門用來&lt;strong&gt;執行 Python Web 應用程式 (如 Flask、Django)&lt;/strong&gt; ，並提供&lt;strong&gt;高效能的並發處理&lt;/strong&gt;。通常在 &lt;strong&gt;反向代理 (Nginx, Apache)&lt;/strong&gt; 與 &lt;strong&gt;Web 應用程式&lt;/strong&gt; 之間。
&lt;img alt=&#34;architecture&#34; loading=&#34;lazy&#34; src=&#34;https://yylunxie.me/blogs/what-is-wsgi/images/architecture.png&#34;&gt;
&lt;p style=&#34;text-align:center&#34;&gt;
  圖片來源: &lt;a href=&#34;https://www.maxlist.xyz/2020/05/06/flask-wsgi-nginx/&#34;&gt;https://www.maxlist.xyz/2020/05/06/flask-wsgi-nginx/&lt;/a&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hackerrank Day 0</title>
      <link>https://yylunxie.me/blogs/hackerrank_day0/</link>
      <pubDate>Fri, 10 Jan 2025 22:36:51 +0800</pubDate>
      <guid>https://yylunxie.me/blogs/hackerrank_day0/</guid>
      <description>&lt;p&gt;這篇文是新系列「Hackerrank」的第 0 篇。會開始寫 Hackerrank 是因為朋友邀請我參加 &lt;strong&gt;2025 TSMC IT CareerHack 第六屆校園黑客松&lt;/strong&gt;，參賽隊伍必須先完成初試才能進入下一階段。初試所使用的線上測驗系統就是 Hackerrank，因此在決定參賽後馬上開始練習 Hackerrank 的 1 Month Preparation Kit。&lt;/p&gt;
&lt;p&gt;在練習過程中，幸好我在上學期有修台大電機的演算法 (雖然成績慘不忍睹)，遇到很多題目都只是將教過的演算法實作出來，或是作為應用題呈現，因此解題時還算順暢。但仍然有許多題目是在當下想破頭也想不到解法的。希望透過這個系列將我在 Hackerrank 遇到的有趣題目記錄下來，加深自己印象的同時，也分享解題方法給同樣遇到困境的朋友們。&lt;/p&gt;
&lt;p&gt;若是之後的文章內容有誤或是想要討論的都歡迎與我聯繫，我們明天見！&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
